<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- JAVA와 연결할 Mapper 파일 설정 -->
<mapper namespace="poly.persistance.mapper.UserInfoMapper">

	<!-- 회원 가입하기(회원정보 등록하기) -->
	<insert id="insertUserInfo" parameterType="UserInfoDTO">
		INSERT INTO USER_INFO
			(
				USER_NO,
				EMAIL,
				PASSWORD,
				REG_DT,
				CHG_DT,
				NICKNAME,
				AUTHORITY,
				STATE
			)
		VALUES (
			USER_NO.NEXTVAL,
			#{email},
			#{password},
			SYSDATE,
			SYSDATE,
			#{nickname},
			'1',
			'0'
		)
	</insert>

	<!-- 이메일로 회원 가입 중복 방지하기 -->
	<select id="getUserExists" parameterType="UserInfoDTO" resultType="UserInfoDTO">
		SELECT DECODE(COUNT(1), 0, 'N', 'Y') AS EXISTS_YN
			FROM USER_INFO
		WHERE EMAIL = #{email}
	</select>
	
	<!-- 닉네임으로 회원 가입 중복 방지하기 -->
	<select id="getUserNick" parameterType="UserInfoDTO" resultType="UserInfoDTO">
		SELECT DECODE(COUNT(1), 0, 'N', 'Y') AS NICK_YN
			FROM USER_INFO
		WHERE NICKNAME = #{nickname}
	</select>
	
	<!-- 로그인을 위해 아이디와 비밀번호가 일치하는지 확인하기 -->
	<select id="getUserLoginCheck" parameterType="UserInfoDTO" resultType="UserInfoDTO">
		SELECT EMAIL, NICKNAME, USER_NO, AUTHORITY, STATE
			FROM USER_INFO
		WHERE EMAIL = #{email}
			AND PASSWORD = #{password}
	</select>
	
	<!-- 패스워드 재발급을 위해 이메일과 닉네임 정보가 있는지 확인 -->
	<select id="checkUserInfo" parameterType="UserInfoDTO" resultType="int">
		SELECT COUNT(*)
		FROM USER_INFO
		WHERE EMAIL = #{email}
			AND NICKNAME = #{nickname}  
	</select>
	
	 <!-- 이메일 주소와 닉네임이 있으면 랜덤 패스워드로 업데이트 -->
	<update id="updateNewPw" parameterType="UserInfoDTO">
		UPDATE USER_INFO 
		SET 
			PASSWORD = #{ranpwd}
		WHERE EMAIL = #{email}
			AND NICKNAME = #{nickname}
	</update>
	
	<!-- 이메일과 닉네임 정보 수정해서 업데이트 -->
	<update id="modifyEmail" parameterType="UserInfoDTO">
	UPDATE USER_INFO
	SET
		EMAIL = #{email},
		NICKNAME = #{nickname}
	WHERE
	 USER_NO = #{user_no}
	</update>
	
	<!-- 닉네임만 변경했을 경우 -->
	<update id="changeNick" parameterType="UserInfoDTO">
	UPDATE USER_INFO
	SET
		NICKNAME = #{nickname}
	WHERE
	 USER_NO = #{user_no}
	</update>
	
	<!-- 이메일만 변경했을 경우 -->
	<update id="changeEmail" parameterType="UserInfoDTO">
	UPDATE USER_INFO
	SET
		EMAIL = #{email}
	WHERE
	 USER_NO = #{user_no}
	</update>
	
	<!-- 비밀번호 정보 수정해서 업데이트 -->
	<update id="modifyPassword" parameterType="UserInfoDTO">
	UPDATE USER_INFO
	SET
		PASSWORD = #{password}
	WHERE
		USER_NO = #{user_no}
	</update>
	
	<!-- 회원탈퇴 -->
	<delete id="userDelete" parameterType="UserInfoDTO">
	DELETE FROM USER_INFO
		WHERE
			USER_NO = #{user_no}	
	</delete>
	
	
	
</mapper>